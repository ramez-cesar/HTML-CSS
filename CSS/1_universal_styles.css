
/* 
    root hace referencia a la etiqueta <html> que se declara al inicio del documento,
    es decir, hace referencia a la raíz o punto de partida de nuestro proyecto.
*/
:root {
    --nombre-Variable1: valor1;
    --nombre-Variable2: valor2;
}

* {
    box-sizing: border-box;     /* Evita un desbordamiento */
    margin: 0;  /* Elimina el margin generado automáticamente por el navegador */
    padding: 0;     /* Elimina el padding generado automáticamente por el navegador */
}

html {
    font-size: 62.5%;   /* Equivale a 10px por cada unidad en rem (1.6rem = 16px)*/
    /* rem nos ayudará mucho en el tema de accesibilidad al ser una medida relativa y no absoluta como lo son los pixeles. */
}

/* 
    1.- Niveles de especificidad:
            - !important        (1.0.0.0.0)
            - inline styles     (0.1.0.0.0)
            - id                (0.0.1.0.0)
            - class             (0.0.0.1.0)
            - etiquetas         (0.0.0.0.1)
        Combinar algunas de estas, podrá incrementar su nivel de especificidad, ejemplo:
            .clase1 .clase2     (0.0.0.2.0)
                Incrementa su importancia quedando por encima (en estos casos) de un #id
            .clase1 selector    (0.0.0.1.1)
                Incrementa su importancia quedando por encima en donde se llama a solo una clase.
        NOTA: El inspector de elementos siempre mostrará aquellos valores con mayor importancia de 
            arriba hacia abajo.
    
    2.- Combinadores:
            - Adyacent sibling:
                Hermano cercano:
                    selector1 + selector2
                Aplica estilos al selector2 que este justo debajo del selector1.
                Si una etiqueta3 está de por medio de estos, no se aplicará el estilo.
            - General sibling:
                Hermano general:
                    selector1 ~ selector2
                Aplica estilos al selector2 que este bajo la misma fila del selector1 sin importar  
                que no este uno debajo del otro. Bastará con pertenecer a la misma fila de identación.
            Child:
                Hijo directo:
                    selector1 > selector2
                Aplica estilos al selector2 siempre que pertenezca a un contenedor padre directo.
                Si un div, section, article (por poner algunos ejemplos) contienen etiquetas de contenido
                y no etiquetas contenedoras, aplicará los estilos. En cambio, si dentro de algún contendor 
                existe otro sub contenedor, los estilos indicados no llegarán a estas etiquetas.
            Descendant:
                Descendiente:
                    selector1 selector2
                Aplica estilos al selector2 con el simple hecho de formar parte del selctor1 como contenedor.
                Aquí no importa a qué etiqueta queramos llegar ni mucho menos si hay otras etiquetas de por medio,
                simplemente aplicará los estilos a aquellas etiquetas que estén endicadas.
    
*/

